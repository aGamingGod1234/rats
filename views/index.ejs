<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>spinningrat.online</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Courier+Prime:wght@400;700&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            background: #000;
            color: #fff;
            font-family: 'Courier Prime', monospace;
            overflow: hidden;
            position: relative;
        }
        
        .header {
            background: #fff;
            color: #000;
            text-align: center;
            padding: 8px;
            font-size: 18px;
            font-weight: bold;
            position: fixed;
            top: 0;
            width: 100%;
            z-index: 2000;
        }
        
        .user-info-top {
            position: absolute;
            top: 60px;
            left: 50%;
            transform: translateX(-50%);
            color: #4CAF50;
            text-align: center;
            font-size: 14px;
            z-index: 2000;
        }
        
        .rat-timer-top {
            position: absolute;
            top: 60px;
            left: 20px;
            font-size: 14px;
            color: #888;
            z-index: 2000;
        }
        
        .main-container {
            height: 100vh;
            padding-top: 120px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            position: relative;
        }
        
        .rat-container {
            position: relative;
            margin-bottom: 20px;
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            align-items: center;
            max-width: 100vw;
            z-index: 1;
        }
        
        .rat {
            width: 200px;
            height: 100px;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 300 150"><path d="M50 100 Q30 80 40 60 Q50 40 80 50 L200 50 Q230 40 250 60 Q270 80 250 100 L220 120 Q200 130 180 125 L120 125 Q100 130 80 120 Z" fill="%23654321"/><path d="M60 90 Q80 70 120 75 L180 75 Q220 70 240 90 Q220 110 180 105 L120 105 Q80 110 60 90 Z" fill="%238B4513"/><circle cx="90" cy="70" r="3" fill="%23000"/><circle cx="210" cy="70" r="3" fill="%23000"/><path d="M140 85 Q150 90 160 85" stroke="%23000" stroke-width="2" fill="none"/><path d="M250 60 Q280 50 290 60 Q285 70 275 65 Q270 62 265 63" fill="%23654321"/><path d="M280 100 Q290 95 295 105 Q285 115 275 110 Q270 107 275 102" fill="%23654321"/></svg>') no-repeat center;
            background-size: contain;
            animation: spin 1s linear infinite;
            transition: animation-duration 0.3s ease;
            margin: 5px;
        }
        
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        .controls {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
            align-items: center;
        }
        
        .control-btn {
            background: transparent;
            border: 2px solid #666;
            color: #fff;
            padding: 8px 16px;
            cursor: pointer;
            font-family: inherit;
            transition: all 0.3s;
            position: relative;
        }
        
        .control-btn:hover {
            border-color: #fff;
            background: rgba(255,255,255,0.1);
        }
        
        .control-btn.active {
            border-color: #4CAF50;
            color: #4CAF50;
        }
        
        .control-btn.rats-mode {
            border-color: #FF6B6B;
            color: #FF6B6B;
        }
        
        .control-btn.speed-mode {
            border-color: #4ECDC4;
            color: #4ECDC4;
        }
        
        .auth-section {
            margin-bottom: 20px;
        }
        
        .discord-btn {
            background: #5865F2;
            border: none;
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            display: inline-block;
            font-family: inherit;
            cursor: pointer;
            transition: background 0.3s;
        }
        
        .discord-btn:hover {
            background: #4752C4;
        }
        
        .user-info {
            color: #4CAF50;
            margin-bottom: 10px;
        }
        
        .leaderboard {
            position: absolute;
            top: 100px;
            right: 20px;
            background: rgba(0,0,0,0.8);
            padding: 15px;
            border: 1px solid #333;
            min-width: 250px;
            z-index: 2000;
        }
        
        .leaderboard h3 {
            margin-bottom: 10px;
            color: #fff;
            font-size: 16px;
        }
        
        .leaderboard-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
            font-size: 12px;
            color: #ccc;
        }
        
        .bottom-stats {
            position: absolute;
            bottom: 20px;
            left: 20px;
            font-size: 12px;
            color: #888;
            display: flex;
            gap: 20px;
            align-items: center;
            z-index: 2000;
        }
        
        .bottom-right-info {
            position: absolute;
            bottom: 20px;
            right: 20px;
            font-size: 12px;
            color: #888;
            display: flex;
            flex-direction: column;
            gap: 5px;
            align-items: flex-end;
            z-index: 2000;
        }
        
        .bottom-controls {
            display: flex;
            gap: 10px;
            align-items: center;
        }
        
        .viewer-stats {
            margin-top: 10px;
        }
        
        .top-right-link {
            position: absolute;
            top: 70px;
            right: 20px;
            font-size: 12px;
            color: #888;
            text-decoration: underline;
            z-index: 2000;
        }
        
        .sound-controls {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .hidden {
            display: none;
        }
    </style>

    <!-- Socket.IO client -->
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <div class="header">spinningrat.online</div>
    
    <!-- User info at top center -->
    <div class="user-info-top">
        <% if (user) { %>
            🧀 Welcome, <%= user.username %> |
            <a href="/logout" style="color: #F44336; text-decoration: underline;">Logout</a>
        <% } else { %>
            🧀 <a href="/auth/discord" style="color: #5865F2; text-decoration: underline;">Login with Discord</a>
        <% } %>
    </div>
    
    <!-- Rat timer at top left -->
    <div class="rat-timer-top">
        Rat time: 
        <span id="ratTime">
            <%= Math.floor(currentUserRatTime / 60) %> minutes, <%= (currentUserRatTime % 60) %> seconds
        </span>
    </div>
    
    <div class="main-container">
        <div class="rat-container" id="ratContainer">
            <div class="rat" id="spinningRat"></div>
        </div>
        
        <div class="controls">
            <div class="sound-controls">
                <button class="control-btn" id="soundBtn">🔊</button>
            </div>
            <button class="control-btn rats-mode" id="modeToggleBtn">
                <span id="modeText">Rats Mode</span>
                <span id="modeInfo">(+1 rat per 10 online)</span>
            </button>
        </div>
        
        <div class="leaderboard">
            <h3>Leaderboard</h3>
            <div id="leaderboardContent">
                <% leaderboard.forEach(function(user, index) { %>
                    <div class="leaderboard-item">
                        <span><%= index + 1 %>. <%= user.name %></span>
                        <span><%= user.points %></span>
                    </div>
                <% }); %>
            </div>
        </div>
    </div>
    
    <div class="top-right-link">
        Check out <a href="https://maxwellcat.world" target="_blank" style="color: #888; text-decoration: underline;">maxwellcat world</a>
    </div>
    
    <div class="bottom-stats">
        <div class="viewer-stats">
            <div id="viewerCount"><%= activeViewers %> people are watching the rats right now.</div>
            <div id="dailyScore">Daily highscore: <span id="highscore"><%= dailyHighscore %></span> | Higher score = more rats</div>
        </div>
    </div>

    <div class="bottom-right-info">
        <div><span style="color: #4CAF50;" id="tunesStatus">tunes: on</span></div>
        <div><a href="https://twotwelve.uk" target="_blank" style="color: #888; text-decoration: underline;">https://twotwelve.uk</a></div>
        <div class="bottom-controls">
            <button class="control-btn rats-mode" id="modeToggleBtn">
                <span id="modeText">Rats Mode</span>
                <span id="modeInfo">(+1 rat per 10 online)</span>
            </button>
        </div>
    </div>

    <script>
        // Initialize Socket.IO
        const socket = io();

        // Real-time updates
        socket.on('viewerUpdate', (count) => {
            activeViewers = count;
            document.getElementById('viewerCount').textContent =
                `${count} people are watching the rats right now.`;
            updateModeEffects();
        });
        
        socket.on('highscoreUpdate', (score) => {
            document.getElementById('highscore').textContent = score;
        });
        
        socket.on('gameData', (data) => {
            activeViewers = data.activeViewers;
            document.getElementById('viewerCount').textContent =
                `${data.activeViewers} people are watching the rats right now.`;
            document.getElementById('highscore').textContent = data.dailyHighscore;
            updateLeaderboard(data.leaderboard);
            updateModeEffects();
        });

        // ← New: live leaderboard updates
        socket.on('leaderboardUpdate', (leaderboard) => {
            updateLeaderboard(leaderboard);
        });

        // Your existing JS logic…
        let currentSpeed = 1;
        let ratScore = 0;
        let soundEnabled = true;
        let startTime = Date.now();
        let ratCount = 1;
        let isRatsMode = true;
        let activeViewers = <%= activeViewers %>;

        const rat = document.getElementById('spinningRat');
        const ratContainer = document.getElementById('ratContainer');
        const soundBtn = document.getElementById('soundBtn');
        const modeToggleBtn = document.getElementById('modeToggleBtn');
        const modeText = document.getElementById('modeText');
        const modeInfo = document.getElementById('modeInfo');

        function getCurrentRotation(element) {
            const style = window.getComputedStyle(element);
            const matrix = style.transform || style.webkitTransform || style.mozTransform;
            if (!matrix || matrix === 'none') return 0;
            const values = matrix.split('(')[1].split(')')[0].split(',');
            const a = parseFloat(values[0]), b = parseFloat(values[1]);
            let angle = Math.round(Math.atan2(b, a) * (180 / Math.PI));
            return angle < 0 ? angle + 360 : angle;
        }

        function getRatPosition(index) {
            if (index === 0) return { x: 0, y: 0 };
            let layer = 1, totalPrevious = 1;
            while (totalPrevious + (layer * 8) < index + 1) {
                totalPrevious += layer * 8; layer++;
            }
            const posInLayer = index - totalPrevious;
            const sideLength = layer * 2;
            let x = 0, y = 0;
            if (posInLayer < sideLength) {
                x = -layer + posInLayer; y = -layer;
            } else if (posInLayer < sideLength * 2) {
                x = layer; y = -layer + (posInLayer - sideLength);
            } else if (posInLayer < sideLength * 3) {
                x = layer - (posInLayer - sideLength * 2); y = layer;
            } else {
                x = -layer; y = layer - (posInLayer - sideLength * 3);
            }
            return { x: x * 110, y: y * 60 };
        }

        function preserveRotationState(oldRats, container) {
            const newRats = container.querySelectorAll('.rat');
            if (!oldRats.length) return;
            newRats.forEach((newRat, i) => {
                if (i < oldRats.length) {
                    const rot = getCurrentRotation(oldRats[i]);
                    newRat.style.transform = `rotate(${rot}deg)`;
                    newRat.offsetHeight;
                    newRat.style.animation = 'none';
                    setTimeout(() => {
                        newRat.style.animation = `spin ${1 / currentSpeed}s linear infinite`;
                    }, 10);
                }
            });
        }

        function updateRatsDisplay() {
            const oldRats = Array.from(ratContainer.querySelectorAll('.rat'));
            const newContent = document.createElement('div');
            newContent.className = 'rat-container';
            for (let i = 0; i < ratCount; i++) {
                const newRat = document.createElement('div');
                newRat.className = 'rat';
                newRat.style.animationDuration = `${1 / currentSpeed}s`;
                if (i > 0) {
                    const pos = getRatPosition(i);
                    newRat.style.position = 'absolute';
                    newRat.style.left = `${pos.x}px`;
                    newRat.style.top = `${pos.y}px`;
                }
                newContent.appendChild(newRat);
            }
            ratContainer.innerHTML = '';
            Array.from(newContent.children).forEach(c => ratContainer.appendChild(c));
            preserveRotationState(oldRats, ratContainer);
        }

        function updateModeEffects() {
            const bonusLevels = Math.floor(activeViewers / 10);
            if (isRatsMode) {
                const newCount = 1 + bonusLevels;
                if (newCount !== ratCount) {
                    ratCount = newCount;
                    updateRatsDisplay();
                }
            } else {
                const newSpeed = 1 + (bonusLevels * 0.1);
                if (newSpeed !== currentSpeed) {
                    currentSpeed = newSpeed;
                    ratContainer.querySelectorAll('.rat').forEach(r => {
                        const rot = getCurrentRotation(r);
                        r.style.transform = `rotate(${rot}deg)`;
                        r.style.animation = 'none';
                        setTimeout(() => {
                            r.style.animation = `spin ${1 / currentSpeed}s linear infinite`;
                        }, 10);
                    });
                }
            }
        }

        modeToggleBtn.addEventListener('click', () => {
            const old = Array.from(ratContainer.querySelectorAll('.rat'));
            isRatsMode = !isRatsMode;
            if (isRatsMode) {
                modeToggleBtn.className = 'control-btn rats-mode';
                modeText.textContent = 'Rats Mode';
                modeInfo.textContent = '(+1 rat per 10 online)';
                currentSpeed = 1;
            } else {
                modeToggleBtn.className = 'control-btn speed-mode';
                modeText.textContent = 'Speed Mode';
                modeInfo.textContent = '(+10% speed per 10 online)';
                ratCount = 1;
            }
            updateModeEffects();
            ratScore++;
            socket.emit('scoreUpdate', ratScore);
        });

        soundBtn.addEventListener('click', () => {
            soundEnabled = !soundEnabled;
            soundBtn.textContent = soundEnabled ? '🔊' : '🔇';
            document.getElementById('tunesStatus').textContent =
                `tunes: ${soundEnabled ? 'on' : 'off'}`;
            document.getElementById('tunesStatus').style.color =
                soundEnabled ? '#4CAF50' : '#888';
        });

        function updateRatTimer() {
            const elapsed = Date.now() - startTime;
            const minutes = Math.floor(elapsed / 60000);
            const seconds = Math.floor((elapsed % 60000) / 1000);
            document.getElementById('ratTime').textContent =
                `${minutes} minutes, ${seconds} seconds`;
        }
        setInterval(updateRatTimer, 1000);

        function updateLeaderboard(leaderboard) {
            const content = document.getElementById('leaderboardContent');
            content.innerHTML = leaderboard.map((u, i) =>
                `<div class="leaderboard-item">
                   <span>${i + 1}. ${u.name}</span>
                   <span>${u.points}</span>
                 </div>`).join('');
        }

        // Initialize
        updateRatsDisplay();
        updateModeEffects();
    </script>
</body>
</html>
